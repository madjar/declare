=======
declare
=======

Build object using a declarative approach.

This if perfect for web scrappers, because it gives you to easily
define the different objets you get from scrapping, and to define how
you build them in a concise way.

It probably can be used for other things, since nothing ties it to
scrappers. Let me know if you find it another use!

Example
=======

A simple scrapper for thepiratebay might look like this::

    class Torrent(Item):
        @prepare
        def prep(self, soup):
            cats, links, seeders, leechers = soup.findAll('td')
            soup._links = links.findAll('a')
    
        name = Field(lamda s: s._links[0].get_text())
        link = S._links[0]['href']
        magnet = S._links[1]['href']
    
    class Page(Item):
          torrents = MapField(Torrent, S.find(['table']).findAll('tr')[1:-1])

    def search(query):
        url = 'http://thepiratebay.sx/search/{}'.format(query)
        s = BeautifulSoup(requests.get(url).text)
        p = Page(s)
        for t in torrents:
            print(t.name, t.link)

In this example, I use request and beautifulsoup, by `declare` can be
used with anything else.

`Torrent` takes a single argument, the beautifoulsoup object
representing the part of the page we want to scrape. First, the `prep`
function is called: we used it for some preprocessing where we extract
the interesting part, and put it in an attribute of soup to use it
latter.

Then we declare the fields. The most basic field is simply a
callable that takes the beautifoulsoup object as an argument and
returns a value. `declare` will create an object with each field
filled with the computed value.

Because, the syntax is a little heavy, we introduce a shortcut: the
`MagicField`. Here, `S` is an instance of
`MagicField`. `S._links[0]['href']` is equivalent to `Field(lambda s:
s._links[0]['href']`, but much more readable.

The `Page` object is similar: it is build from a beautifoulsoup
object (in this case, one representing the whole page). We used
another convenience field: the `MapField`, which states that the each
item returned by the field must be passed to a callable. This is very
useful to build other objects from parts of an object.

Installation
============
::

  pip install declare

`declare` is only compatible for python 3, because of the
metaprogramming used to ensure the evaluation order of the preparation
methods and the field.

Usage
=====

TBD

Note: fields and method decorated with prepare are evaluated in the
order of the declaration and can have site effects.

Development
===========

You can participate in the development on github_

.. _github: 'https://github.com/madjar/declare'

TODO: nicer error message (for now, the error messages generated by
the scrapping tend to be obfuscated by declare).
