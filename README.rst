=======
declare
=======

Build objects through a declarative approach.

This is perfect for web scrappers, because it enables you to easily
define the different objects you get from scrapping, and to define how
they are built in a concise way.

It can probably be used for other things, since nothing ties it to
scrappers. Let me know if you find it another use!

Warning
=======

This is a proof of concept of what is mostly a bad idea. Writing the
equivalent code in an `__init__` function is simpler, more readable
and involves much less magic.

Example
=======

A simple scrapper for thepiratebay might look like this::

    class Torrent(Item):
        @prepare
        def prep(self, soup):
            cats, links, seeders, leechers = soup.findAll('td')
            soup._links = links.findAll('a')

        name = Field(lamda s: s._links[0].get_text())
        link = S._links[0]['href']
        magnet = S._links[1]['href']

    class Page(Item):
          torrents = MapField(Torrent, S.find(['table']).findAll('tr')[1:-1])

    def search(query):
        url = 'http://thepiratebay.sx/search/{}'.format(query)
        s = BeautifulSoup(requests.get(url).text)
        p = Page(s)
        for t in torrents:
            print(t.name, t.link)

In this example, I use request and beautifulsoup, but `declare` can be
used with anything else.

`Torrent` takes a single argument, the beautifoulsoup object
representing the part of the page we want to scrape. First, the `prep`
function is called: we use it for some preprocessing where we extract
the interesting part, and put it in an attribute for soup to use it
later.

Then we declare the fields. The most basic field is simply a
callable that takes the beautifoulsoup object as an argument and
returns a value. `declare` will fill each field with the computed
value when you create the object.

Because the syntax is a little heavy, we introduce a shortcut: the
`MagicField`. Here, `S` is an instance of `MagicField`.
`S._links[0]['href']` is equivalent to `Field(lambda s: s._links[0]['href'])`,
but much more readable.

The `Page` object is similar: it is built from a beautifoulsoup
object (in this case, one representing the whole page). We used
another convenience field: the `MapField`, which states that each
item returned by the field must be passed to a callable. This is very
useful to build other objects from parts of an object.

Installation
============
::

  pip install declare

`declare` is only compatible with python 3, because of the
metaprogramming used to ensure the evaluation order of the preparation
methods and the fields.

Usage
=====

TBD

Note: fields and methods decorated with prepare are evaluated in the
order of their declaration and can have site effects.

Development
===========

You can participate in the development on github_

.. _github: 'https://github.com/madjar/declare'

TODO: nicer error messages (for now, the error messages generated by
the scrapping tend to be obfuscated by declare).
